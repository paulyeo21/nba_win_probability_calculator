dygraph(tmacGame$p)
head(lungDeaths)
head(tmacGame$p)
head(mdeaths)
tmacp <- cbind(tmacGame$p)
head(tmacp)
dygraph(tmacp)
predicted
hw <- HoltWinters(ldeaths)
predicted <- predict(hw, n.ahead = 72, prediction.interval = TRUE)
predicted
head(hw)
help(predict)
summary(nbaGamesSim)
help(dygraph)
lungDeaths
mdeaths
fdeaths
tmacGame
tmacGame[,26] = NULL
tmacGame
View(tmacGame)
tmacGame[,25] = NULL
View(tmacGame)
write.csv(tmacGame, "~/Google Drive/MATH355/Data/tmacGame.csv", row.names=F)
mdeaths
str(mdeaths)
data(sample_matrix)
ppoint
xts(ppoint, order.by=index(ppoint))
install.packages("xts")
librar(xts)
library(xts)
xts(ppoint, order.by=index(ppoint))
xts(ppoint, order.by=index(tmacGame$gt))
xts(ppoint, order.by=tmacGame$gt)
shiny::runApp('Google Drive/MATH355/shinyApp')
X <- matrix(1:6, 3) + 100 # test data
zoo(X)
X
x <- xts(X, as.POSIXct(1:nrow(X), origin = "1970-01-01"))
x
X <- matrix(1:6, 3) + 100 # test data
x <- xts(X, as.POSIXct(1:nrow(X), origin = "1970-01-01"))
x
shiny::runApp('Google Drive/MATH355/shinyApp')
dygraph(x)
x
X
ppoint
1:6
dygraph(x, main="Test") %>% dyAxis("y", label="Y axis")
dygraph(x, main="Test") %>% dyAxis("y", label="Y axis") %>% dyAxis("x", label="gametime")
nhtemp
dygraph(nhtemp)
str(nhtemp)
class(nhtemp)
ppoint
ppointTimeSeries <- ts(ppoint)
ppointTimeSeries
dygraph(ppointTimeSeries)
dygraph(ppointTimeSeries~tmacGame$gt)
lungDeaths
test <- lungDeaths
row.names(test)
str(lungDeaths)
matrix
matrix(1:3,4)
matrix(1:3)
str(ts(matrix(1:3)))
dygraph(ts(matrix(1:3)))
help(matri)
help(matrix)
matrix(tmacGame$p, dimnames=list(tmacGame$gt))
matrix(tmacGame$p, dimnames=list(tmacGame$gt, p))
matrix(tmacGame$p, dimnames=list(tmacGame$gt, c(p)))
matrix(tmacGame$p, dimnames=list(tmacGame$gt))
ppointTimeSeries <- matrix(tmacGame$p, dimnames=list(tmacGame$gt))
ppointTimeSeries <- ts(ppointTimeSeries)
dygraph(ppointTimeSeries)
shiny::runApp('Google Drive/MATH355/shinyApp')
shiny::runApp('Google Drive/MATH355/shinyApp')
help(HoltWinters)
shiny::runApp('Google Drive/MATH355/shinyApp')
str(ppointTimeSeries)
tmacGame <- read.csv("~/Google Drive/MATH355/Data/tmacGame.csv")
ppointTimeSeries <- ts(matrix(tmacGame$p, dimnames=list(tmacGame$gt)))
str(ppointTimeSeries)
shiny::runApp('Google Drive/MATH355/shinyApp')
shiny::runApp('Google Drive/MATH355/shinyApp')
nhTemp
nhtemp
dygraph(nhtemp)
tmacGame$gt
help(as.Date)
paste("01/01/",tmacGame$gt)
paste0(tmacGame$gt,"-01-01")
testDatesTmac <- paste0(tmacGame$gt,"-01-01")
ts(matrix(tmacGame$p, dimnames=list(testDatesTmac)))
testTS <- ts(matrix(tmacGame$p, dimnames=list(testDatesTmac)))
str(testTS)
dygraph(testTS)
mdeaths
str(mdeaths)
xts(ppoint)
xts(ppoint, order.by=index(ppoint))
tmactestDate <- paste0(tmacGame$gt,"-01-01")
xts(ppoint, order.by=index(tmactestDate))
as.Date(tmactestDate)
tmactestDate <- as.Date(tmactestDate)
xts(ppoint, order.by=index(tmactestDate))
tmactestDate <- as.POSIXct(paste0(tmacGame$gt, "-01-01"), format="%Y-%m-%d")
library(xts)
xt <- xts(x=tmacGame$p, order.by=tmactestDate)
str(xt)
dygraph(xt)
str(nhtemp)
ts(tmacGame$p, frequency=1, start=c(0000,1))
ts(tmacGame$p, frequency=1, start=c(2000,1))
ts(tmacGame$p, frequency=4, start=c(0000,1))
plot.ts(ts(tmacGame$p, frequency=1, start=c(2000,1)))
plot.ts(ts(tmacGame$p, frequency=1, start=c(0000,1)))
shiny::runApp('Google Drive/MATH355/shinyApp')
shiny::runApp('Google Drive/MATH355/shinyApp')
master <- read.csv("~/Google Drive/MATH355/Data/Master.csv")
mod1 = glm(win ~ m + gt + m:gt + line, data=master, family="binomial")
summary(mod1)
View(master)
pr = makeFun(mod1)
library(mosaic)
pr = makeFun(mod1)
pr
pr(m=1, gt=1000, line=-6)
tmacGame <- read.csv("~/Google Drive/MATH355/Data/0020400273.csv")
View(tmacGame)
ppoint <- pr(m = tmacGame['m'], gt = tmacGame['gt'], line = tmacGame['line'])
colnames(tmacGame) = c("gid","rid","r","ts","tsv","q","min","sec","gt","a","h","m","d","emt","emat","gst1","gst2","pt1","pt2","line","total","fm","ft","win","homecourt")
ppoint <- pr(m = tmacGame['m'], gt = tmacGame['gt'], line = tmacGame['line'])
ppoint
plot(ppoint~gameTime, type='l', col='red', ylim=c(0,1.0), xlab="Game Time (seconds)", ylab="Win Probability", main="Win Probability for HOU-SAS (12/9/2004)")
gameTime <- tmacGame['gt'][[1]]
plot(ppoint~gameTime, type='l', col='red', ylim=c(0,1.0), xlab="Game Time (seconds)", ylab="Win Probability", main="Win Probability for HOU-SAS (12/9/2004)")
source('~/Google Drive/MATH355/style.R')
file.exists(Sys.which('texi2dvi'))
pdflatex -v
library(rmarkdown)
render("Untitled1")
render("~/Google Drive/MATH355/Untitled1")
render("~/Google Drive/MATH355/Untitled1.Rmd")
render("~/Google Drive/MATH355/Untitled.Rmd")
system("pandoc -v")
devtools::install_github("rstudio/rmarkdown")
library(rmarkdown)
library("yaml", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
$$f(p, \beta_i | Y) = \frac{f(Y | p, \beta_i) f(\beta_i)}{f(Y)}$$
master <- read.csv("~/Google Drive/MATH355/Data/Master.csv")
head(master)
library(ggplot2)
ggplot(master, aes(gt)) + geom_point()
ggplot(master, aes(x=gt)) + geom_density()
ggplot(master, aes(x=gt)) + geom_density(fill=NA)
ggplot(master, aes(x=gt)) + geom_density(fill=NA) + aes(y=..count..)
ggplot(master, aes(x=gt)) + geom_density(adjust=1/5) + aes(y=..count..)
ggplot(master, aes(x=gt)) + geom_density(colour="darkgreen", size=2, fill="green") + aes(y=..count..)
ggplot(master, aes(x=gt)) + geom_density(colour="darkgreen", size=1) + aes(y=..count..)
ggplot(master, aes(x=m)) + geom_density(colour="blue", size=1) + aes(y=..count..) + xlab("Point Difference")
ggplot(master, aes(x=m, y=gt)) + geom_points()
ggplot(master, aes(x=m, y=gt)) + geom_point()
ggplot(master, aes(x=m, y=gt)) + geom_point(alpha=1/10)
ggplot(master, aes(x=m, y=gt)) + geom_point(alpha=1/100)
summary(master$gt)
ggplot(master, aes(x=gt, y=m)) + geom_point(alpha=1/100)
ggplot(master, aes(x=gt, y=m)) + geom_point(alpha=1/50)
ggplot(master, aes(x=m, y=gt)) + geom_point(alpha=1/75)
xtable(head(master[, 1:6]), caption="First rows of dataset")
library(xtable)
options(xtable.comment = FALSE)
options(xtable.booktabs = TRUE)
xtable(head(master[, 1:6]), caption="First rows of dataset")
tmacGame <- read.csv("~/Google Drive/MATH355/Data/0020400273.csv")
head(tmacGame)
colnames(tmacGame) = c("gid","rid","r","ts","tsv","q","min","sec","gt","a","h","m","d","emt","emat","gst1","gst2","pt1","pt2","line","total","fm","ft","win","homecourt")
head(tmacGame)
length(tmacGame)
tmacGame[,25]
tmacGame[,23]
length(tmacGame)
head(tmacGame)
tmacGame[,26]
tmacGame <- tmacGame[,-c(25)]
head(tmacGame)
write.csv(tmacGame, "~/Google Drive/MATH355/Data/tmacGame.csv", row.names=F)
library(mosaic)
ppoint <- pr(m = tmacGame['m'], gt = tmacGame['gt'], line = tmacGame['line'])
ppoint[390] <- 1
gameTime <- tmacGame['gt'][[1]]
gameTime[390] <- 2880
ggplot(ppoint ~ gameTime)
ggplot(aes(x=gameTime, y=ppoint)) + geom_point()
plot(ppoint~gameTime, type='l', col='red', ylim=c(0,1.0), xlab="Game Time (seconds)", ylab="Win Probability", main="Win Probability for HOU-SAS (12/9/2004)")
tmacGame <- read.csv("~/Google Drive/MATH355/Data/0020400273.csv")
mod1 = glm(win ~ m + gt + m:gt + line, data=master, family="binomial")
pr = makeFun(mod1)
ppoint <- pr(m = tmacGame['m'], gt = tmacGame['gt'], line = tmacGame['line'])
head(tmacGame)
tmacGame <- read.csv("~/Google Drive/MATH355/Data/tmacGame.csv")
pr = makeFun(mod1)
ppoint <- pr(m = tmacGame['m'], gt = tmacGame['gt'], line = tmacGame['line'])
colnames(master)
xtable(head(master[,c(1,9,12,13,20,24)]), caption="First rows of dataset")
head(master[,c(1,9,12,13,20,24)])
View(master)
head(master, 5:10)
tail(master)
ggplot(master, aes(x=gt)) + geom_density(colour="darkgreen", size=1) + aes(y=..count..) + xlab("Game Time")
ggplot(master, aes(x=gt)) + geom_density(colour="darkgreen", size=1) + xlab("Game Time")
xtable(master$gt)
xtable(master[,1])
xtable(head(master[,c(1,2,3)]))
xtable(master[,c(1,2,3)])
summary(master$gt)
summary(master$m)
summary(master$line)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
Min = c(0, -46, -18)
"Min" = c(0, -46, -18)
"1st Qu." = c(743, -4, -8)
"Median" = c(1471, 1, -4)
"Mean" = c(1481, 1.702, -3.415)
"3rd Qu." = c(2202, 7, 1.5)
"Max" = c(3780, 44, 14)
df = data.frame("Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max")
df
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
dfTest = data.frame(n, s, b)
dfTest
a = c(0, -46, -18)
b = c(743, -4, -8)
c = c(1471, 1, -4)
d = c(1481, 1.702, -3.415)
e = c(2202, 7, 1.5)
f = c(3780, 44, 14)
df = data.frame(a,b,c,d,e,f)
df
colnames(df)
colnames(df) = c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max.")
df
rownames(df)
rownames(df) = c("Game Time", "Point Difference", "Vegas Line")
df
xtable(rownames[1,])
xtable(df[1,])
summary(master$line)
summary(master$gt)
summary(master$m)
help(pr)
library(mosaic)
help(makeFun)
f <- makeFun(x+y)
f <- makeFun(x+y ~ x & y)
f
f(10, 2)
f(10, 2x10^5)
f(10, 2*10^5)
f(10, 2*10^-5)
bayesianFunction <- makeFun(-0.8258*10^-2 + 0.1623*a + -5.311*10^-6*b + -0.1776*c + 2.889*10^-5*a*b ~ a & b & c)
bayesianFunction <- makeFun(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime ~ pointDiff & gameTime & vegasLine)
bayesianFunction
bayesianFunction(pointDiff = 1, gameTime = 3000, vegasLine = -6)
bayesianFunction <- makeFun(e*(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)/(1+e(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)) ~ pointDiff & gameTime & vegasLine)
e*1
e**1
e
e
bayesianFunction <- makeFun(exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)/(1+exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)) ~ pointDiff & gameTime & vegasLine)
bayesianFunction
bayesianFunction(pointDiff = 1, gameTime = 3000, vegasLine = -6)
bayesianFunction(pointDiff = 1, gameTime = 3000, vegasLine = -10)
bayesianFunction(pointDiff = 1, gameTime = 3001, vegasLine = -10)
bayesianFunction(pointDiff = 0, gameTime = 3001, vegasLine = -10)
bayesianFunction(pointDiff = 10, gameTime = 3001, vegasLine = -10)
bayesianFunction <- makeFun(exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)/(1+exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)) ~ pointDiff & gameTime & vegasLine)
ppoint <- pr(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
ppoint <- bayesianFunction(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
ppoint[390] <- 1
gameTime <- tmacGame['gt'][[1]]
gameTime[390] <- 2880
head(ppoint)
head(gameTime)
plot(ppoint~gameTime, type='l', col='red', ylim=c(0,1.0), xlab="Game Time (seconds)", ylab="Win Probability", main="Win Probability for HOU-SAS (12/9/2004)")
ppoint
plot(ppoint~gameTime, type='l', col='red', ylim=c(0,1.0), xlab="Game Time (seconds)", ylab="Win Probability", main="Win Probability for HOU-SAS (12/9/2004)")
tmacGame <- read.csv("~/Google Drive/MATH355/Data/tmacGame.csv")
# mod1 = glm(win ~ m + gt + m:gt + line, data=master, family="binomial")
# pr = makeFun(mod1)
pr = makeFun(mod1)
# ppoint <- pr(m = tmacGame['m'], gt = tmacGame['gt'], line = tmacGame['line'])
ppoint <- pr(m = tmacGame['m'], gt = tmacGame['gt'], line = tmacGame['line'])
plot(ppoint~gameTime, type='l', col='red', ylim=c(0,1.0), xlab="Game Time (seconds)", ylab="Win Probability", main="Win Probability for HOU-SAS (12/9/2004)")
# ppoint[390] <- 1
# gameTime <- tmacGame['gt'][[1]]
# gameTime[390] <- 2880
ppoint[390] <- 1
gameTime[390] <- 2880
gameTime <- tmacGame['gt'][[1]]
ppoint
str(Ppoint)
str(ppoint)
bayesP <- bayesianFunction(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
bayesP[390] <- 1
bayesP
bayesP[390] <- 1
bayesP['m'] <- 1
bayesP[390] <- 1
bayesP
bayesP <- bayesianFunction(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
bayesP
bayesP[389,]
bayesP[389,1]
bayesP[390,1] <- 1
bayesP
bayesP[,1]
bayesP[,2] <- 2
bayesP
tmacGame['gt'][[1]]
bayesP['gt'] <- 2
bayesP
bayesianFunction <- makeFun(exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)/(1+exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)) ~ pointDiff & gameTime & vegasLine)
bayesP <- bayesianFunction(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
bayesP[390,1] <- 1
bayesP['gt'] <- tmacGame['gt'][[1]]
bayesP <- bayesianFunction(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
bayesP['gt'] <- tmacGame['gt'][[1]]
bayesP[390,1] <- 1
bayesP[390,2] <- 2880
bayesP
ggplot(bayesP, aes(x=gt, y=m)) + geom_point()
ggplot(bayesP, aes(x=gt, y=m)) + geom_line()
ggplot(bayesP, aes(x=gt, y=m)) + geom_line(colour="red") + labs(x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=m)) + geom_line(colour="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
bayesianFunction <- makeFun(exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)/(1+exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)) ~ pointDiff & gameTime & vegasLine)
bayesP <- bayesianFunction(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
head(bayesP)
bayesP['gt'] <- tmacGame['gt'][[1]]
bayesP['m'] <- tmacGame['m'][[1]]
head(bayesP)
bayesianFunction <- makeFun(exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)/(1+exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)) ~ pointDiff & gameTime & vegasLine)
bayesP <- bayesianFunction(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
head(bayesP)
colnames(bayesP) <- "p"
head(bayesP)
bayesP['gt'] <- tmacGame['gt'][[1]]
bayesP['m'] <- tmacGame['m'][[1]]
head(bayesP)
tail(bayesP)
bayesianFunction <- makeFun(exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)/(1+exp(-0.8258*10^-2 + 0.1623*pointDiff + -5.311*10^-6*gameTime + -0.1776*vegasLine + 2.889*10^-5*pointDiff*gameTime)) ~ pointDiff & gameTime & vegasLine)
bayesP <- bayesianFunction(pointDiff = tmacGame['m'], gameTime = tmacGame['gt'], vegasLine = tmacGame['line'])
colnames(bayesP) <- "p"
bayesP['gt'] <- tmacGame['gt'][[1]]
bayesP['m'] <- tmacGame['m'][[1]]
bayesP[390,1] <- 1
bayesP[390,2] <- 2880
bayesP[390,3] <- 1
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(colour="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(colour="red", size=m) + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(colour="red", size=m*10) + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(colour="red", size=2) + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(colour="red", size=1) + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(colour="red", size=0.5) + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(colour="red", aes(size=m)) + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + scale_colour_gradient(low="blue") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + scale_colour_gradient(low="blue") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + scale_colour_gradient(low="blue",high="red",title="Point Difference") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Probability of Winning")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m),title="Point Difference")) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Probability of Winning")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Probability of Winning", colour="Point Difference")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Probability of Winning", colour="Point Diff")
ggplot(bayesP, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Winning Probability", colour="Point Diff")
summary(nbaGamesSim)
help(rm)
rm(list=ls())
shiny::runApp('Google Drive/MATH355/shinyApp')
load("finalReport.RData")
load("~/Google Drive/MATH355/shinyApp/finalReport.RData")
summary(tmacGamePredictions$p)
load("~/Google Drive/MATH355/shinyApp/finalReport.RData")
shiny::runApp('Google Drive/MATH355/shinyApp')
library(mosaic)
help(save)
save.image("~/Google Drive/MATH355/shinyApp/finalReport.RData")
load("~/Google Drive/MATH355/shinyApp/finalReport.RData")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
install.packages(c('ggplot2', 'shiny','dygraphs','mosaic','rjags'))
install.packages(c("ggplot2", "shiny", "dygraphs", "mosaic",
'rjags'
))
library(shiny)
shiny::runApp('Google Drive/MATH355/shinyApp')
library(shinyapps)
deployApp("~/Google Drive/MATH355/shinyApp/")
deployApp("~/Google Drive/MATH355/shinyApp/")
shiny::runApp('Google Drive/MATH355/shinyApp')
dev_mode()
deployApp("~/Google Drive/MATH355/shinyApp/")
deployApp("~/Google Drive/MATH355/shinyApp/")
head(tmacGamePredictions$p)
head(tmacGamePredictions$gt)
load("~/Google Drive/MATH355/finalReport.RData")
table(nbaGamesSamples$b4 > 0)
plot(nbaGamesSamples$b4 > 0)
densityPlot(nbaGamesSamples$b4 > 0)
densityplot(nbaGamesSamples$b4 > 0)
lakersGame <- read.csv("~/Google Drive/MATH355/Data/0020401208.csv")
View(lakersGame)
colnames(lakersGame) = c("gid","rid","r","ts","tsv","q","min","sec","gt","a","h","m","d","emt","emat","gst1","gst2","pt1","pt2","line","total","fm","ft","win")
View(lakersGame)
write.csv(lakersGame, "~/Google Drive/MATH355/Data/", row.names=F)
write.csv(lakersGame, "~/Google Drive/MATH355/Data", row.names=F)
write.csv(lakersGame, "~/Google Drive/MATH355/Data/lakersGame.csv", row.names=F)
nbaGameToProbabilities(lakersGame)
head(nbaGameToProbabilities(lakersGame))
lakersGamePredictions <- nbaGameToProbabilities(lakersGame)
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr-0.03, ymax=upr+0.03), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Winning Probability", colour="Point Diff")
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr, ymax=upr), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Winning Probability", colour="Point Diff")
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr-0.01, ymax=upr+0.01), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Winning Probability", colour="Point Diff")
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr, ymax=upr), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Winning Probability", colour="Point Diff")
View(lakersGame)
save.image("~/Google Drive/MATH355/finalReport.RData")
ggplot(tmacGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr-0.03, ymax=upr+0.03), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Winning Probability", colour="Point Diff")
ggplot(tmacGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr-0.03, ymax=upr+0.03), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(x="Game Time", y="Winning Probability", colour="Point Diff")
lakersGame <- read.csv("~/Google Drive/MATH355/Data/0020400115.csv")
colnames(lakersGame) = c("gid","rid","r","ts","tsv","q","min","sec","gt","a","h","m","d","emt","emat","gst1","gst2","pt1","pt2","line","total","fm","ft","win")
write.csv(lakersGame, "~/Google Drive/MATH355/Data/lakersGame.csv", row.names=F)
lakersGamePredictions <- nbaGameToProbabilities(lakersGame)
View(lakersGame)
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr, ymax=upr), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Winning Probability", colour="Point Diff")
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr, ymax=upr), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(title="Win Probability for HOU-SAS 12/9/2004", x="Game Time", y="Winning Probability", colour="Point Diff") + scale_y_continuous(limits=c(0,1.0))
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr, ymax=upr), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(x="Game Time", y="Winning Probability", colour="Point Diff") + scale_y_continuous(limits=c(0,1))
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr-0.01, ymax=upr+0.01), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(x="Game Time", y="Winning Probability", colour="Point Diff") + scale_y_continuous(limits=c(0,1))
ggplot(lakersGamePredictions, aes(x=gt, y=p)) + geom_line(aes(colour=m)) + geom_ribbon(aes(ymin=lwr, ymax=upr), alpha=0.3) + scale_colour_gradient(low="blue",high="red") + labs(x="Game Time", y="Winning Probability", colour="Point Diff") + scale_y_continuous(limits=c(0,1))
head(lakersGamePredictions)
head(lakersGamePredictions['gt']=1527)
subset(lakersGamePredictions, lakersGamePredictions['gt']=1527)
subset(lakersGamePredictions, 'gt'=1527)
subset(lakersGamePredictions, gt=1527)
subset(lakersGamePredictions[, gt]'=1527)
)
''
subset(lakersGamePredictions[, gt]=1527)
help(subset)
subset(lakersGamePredictions, gt == 1527)
df = (c(207, 1527, 7, 0.8846695, 0.8873682, 0.8900318))
df
colnames(df) = c("gt", "m", "lwr", "p", "upr")
a = c(207, 1527, 7, 0.8846695, 0.8873682, 0.8900318)
subset(lakersGamePredictions, gt == 1528)
subset(lakersGamePredictions, gt > 1527)
b = c(209, 1534, 5, 0.8362146, 0.8392100, 0.8421851)
a
b
df = (a,b)
df = data.frame(a,b)
colnames(df) = c("gt", "m", "lwr", "p", "upr")
df
a=c("207","209")
b=c("1527","1534")
c=c("7","5")
d=c(0.8846695,0.8362146)
e=c(0.8873682,0.8392100)
f=c(0.8900318,0.8421851)
df=data.frame(a,b,c,d,e,f)
colnames(df) = c("gt", "m", "lwr", "p", "upr")
df
df=data.frame(b,c,d,e,f)
colnames(df) = c("gt", "m", "lwr", "p", "upr")
df
predictionsdf = df
rm(a,b,c,d,e,f)
rm(df)
xtable(predictionsdf, digits=2, caption="Sample predictions table")
save.image("~/Google Drive/MATH355/finalReport.RData")
shiny::runApp('Google Drive/MATH355/shinyApp')
install.packages(c("boot", "car", "caTools", "class", "cluster", "coda", "codetools", "colorspace", "digest", "dplyr", "evaluate", "foreign", "formatR", "ggdendro", "highr", "httr", "KernSmooth", "knitr", "Lahman", "lattice", "magrittr", "manipulate", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "plyr", "R.methodsS3", "R.oo", "R.utils", "RColorBrewer", "Rcpp", "RCurl", "repmis", "reshape2", "rpart", "spatial", "stringr", "survival", "testthat", "xtable"))
install.packages(c("boot", "car", "caTools", "class", "cluster",
)
)
install.packages(c("boot", "car", "caTools", "class", "cluster", "coda", "codetools", "colorspace", "digest", "dplyr", "evaluate", "foreign", "formatR", "ggdendro", "highr", "httr", "KernSmooth", "knitr", "Lahman", "lattice", "magrittr", "manipulate", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "plyr", "R.methodsS3", "R.oo", "R.utils", "RColorBrewer", "Rcpp", "RCurl", "repmis", "reshape2", "rpart", "spatial", "stringr", "survival", "testthat", "xtable"))
shiny::runApp()
install.packages("RJSONIO")
install.packages("shiny")
library(shiny)
library(RJSONIO)
shiny::runApp()
shiny::runApp()
library(rjags)
library(mosaic)
shiny::runApp()
install.packages("RcppEigen")
library(RcppEigen)
shiny::runApp()
